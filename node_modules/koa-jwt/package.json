{
  "name": "koa-jwt",
  "version": "1.1.0",
  "description": "Koa JWT authentication middleware.",
  "keywords": [
    "auth",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "http",
    "jwt",
    "json",
    "middleware",
    "token",
    "oauth",
    "koa"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/stiang/koa-jwt.git"
  },
  "bugs": {
    "url": "http://github.com/stiang/koa-jwt/issues"
  },
  "author": {
    "name": "Stian Grytøyr",
    "email": "stian@grytoyr.net",
    "url": "http://stian.grytoyr.net/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "jsonwebtoken": "~5.0.0",
    "koa-unless": "0.0.1",
    "thunkify": "~2.1.x"
  },
  "devDependencies": {
    "koa": "koajs/koa",
    "mocha": "~2.2.1",
    "supertest": "~0.15.0"
  },
  "engines": {
    "node": ">= 0.12.0"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "# koa-jwt\n\nKoa middleware that validates JSON Web Tokens and sets `ctx.state.user`\n(by default) if a valid token is provided.\n\nThis module lets you authenticate HTTP requests using JSON Web Tokens\nin your [Koa](http://koajs.com/) (node.js) applications.\n\nSee [this article](http://blog.auth0.com/2014/01/07/angularjs-authentication-with-cookies-vs-token/)\nfor a good introduction.\n\n## Install\n\n```\n$ npm install koa-jwt\n```\n\n## Usage\n\nThe JWT authentication middleware authenticates callers using a JWT\ntoken.  If the token is valid, `ctx.state.user` (by default) will be set\nwith the JSON object decoded to be used by later middleware for\nauthorization and access control.\n\n\n## Example\n\n```js\nvar koa = require('koa');\nvar jwt = require('koa-jwt');\n\nvar app = koa();\n\n// Custom 401 handling if you don't want to expose koa-jwt errors to users\napp.use(function *(next){\n  try {\n    yield next;\n  } catch (err) {\n    if (401 == err.status) {\n      this.status = 401;\n      this.body = 'Protected resource, use Authorization header to get access\\n';\n    } else {\n      throw err;\n    }\n  }\n});\n\n// Unprotected middleware\napp.use(function *(next){\n  if (this.url.match(/^\\/public/)) {\n    this.body = 'unprotected\\n';\n  } else {\n    yield next;\n  }\n});\n\n// Middleware below this line is only reached if JWT token is valid\napp.use(jwt({ secret: 'shared-secret' }));\n\n// Protected middleware\napp.use(function *(){\n  if (this.url.match(/^\\/api/)) {\n    this.body = 'protected\\n';\n  }\n});\n\napp.listen(3000);\n```\n\n\nAlternatively you can conditionally run the `jwt` middleware under certain conditions:\n\n```js\nvar koa = require('koa');\nvar jwt = require('koa-jwt');\n\nvar app = koa();\n\n// Middleware below this line is only reached if JWT token is valid\n// unless the URL starts with '/public'\napp.use(jwt({ secret: 'shared-secret' }).unless({ path: [/^\\/public/] }));\n\n// Unprotected middleware\napp.use(function *(next){\n  if (this.url.match(/^\\/public/)) {\n    this.body = 'unprotected\\n';\n  } else {\n    yield next;\n  }\n});\n\n// Protected middleware\napp.use(function *(){\n  if (this.url.match(/^\\/api/)) {\n    this.body = 'protected\\n';\n  }\n});\n\napp.listen(3000);\n```\n\nFor more information on `unless` exceptions, check [koa-unless](https://github.com/Foxandxss/koa-unless).\n\nYou can also add the `passthrough` option to always yield next,\neven if no valid Authorization header was found:\n```js\napp.use(jwt({ secret: 'shared-secret', passthrough: true }));\n```\nThis lets downstream middleware make decisions based on whether `ctx.state.user` is set.\n\n\nIf you prefer to use another ctx key for the decoded data, just pass in `key`, like so:\n```js\napp.use(jwt({ secret: 'shared-secret', key: 'jwtdata' }));\n```\nThis makes the decoded data available as `ctx.state.jwtdata`.\n\nYou can specify audience and/or issuer as well:\n```js\napp.use(jwt({ secret:   'shared-secret',\n              audience: 'http://myapi/protected',\n              issuer:   'http://issuer' }));\n```\nIf the JWT has an expiration (`exp`), it will be checked.\n\n\nThis module also support tokens signed with public/private key pairs. Instead\nof a secret, you can specify a Buffer with the public key:\n```js\nvar publicKey = fs.readFileSync('/path/to/public.pub');\napp.use(jwt({ secret: publicKey }));\n```\n\n## Related Modules\n\n- [jsonwebtoken](https://github.com/auth0/node-jsonwebtoken) — JSON Web Token signing\nand verification\n\nNote that koa-jwt exports the `sign`, `verify` and `decode` functions from the above module as a convenience.\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Author\n\nStian Grytøyr\n\n## Credits\n\nThis code is largely based on [express-jwt](https://github.com/auth0/express-jwt).\n\n  - [Auth0](http://auth0.com/)\n  - [Matias Woloski](http://github.com/woloski)\n\n## Contributors\n- [soygul] (https://github.com/soygul)\n- [tunnckoCore] (https://github.com/tunnckoCore)\n- [getuliojr] (https://github.com/getuliojr)\n- [cesarandreu] (https://github.com/cesarandreu)\n- [michaelwestphal] (https://github.com/michaelwestphal)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "_id": "koa-jwt@1.1.0",
  "dist": {
    "shasum": "57f6842cabdb7ce5cf673b6d5e7c986290c6d2e1"
  },
  "_from": "koa-jwt@",
  "_resolved": "https://registry.npmjs.org/koa-jwt/-/koa-jwt-1.1.0.tgz"
}
